@page "/purchaseproduct"
@using BlazorWasamAssignment.Models
@inject AppStateContainer state
@using AutoMapper
@inject IMapper Mapper
@inject NavigationManager Navigate

<div class="text-center">
    <h3>Purchase Product</h3>
</div>
<div class="container">
    <table class="table table-striped table-bordered">
        <thead>
            <tr>
                <td>Product Id</td>
                <td>Product Name</td>
                <td>Price</td>
                <td>Quantity</td>
                <td>Purchase Items</td>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in productToPurchase)
            {
                <tr>
                    <td>@product.ProductId</td>
                    <td>@product.ProductName</td>
                    <td>@product.Price</td>
                    <td><input type="number" @bind-value="@product.Quantity" /></td>
                    <td>
                        @if (product.purchase == "Purchase")
                        {
                            <button class="btn btn-warning"
                                    @onclick="()=>purchased(product.ProductId)">
                                @product.purchase
                            </button>
                        }
                        else
                        {
                            <button class="btn btn-warning" disabled>@product.purchase</button>
                        }

                    </td>
                </tr>
            }
        </tbody>
        <tfoot>
            <tr>
                <td colspan="5" class="text-center">
                    <button class="btn btn-primary" @onclick="NavigateToBill">Generate Bill</button>
                </td>
            </tr>
        </tfoot>
    </table>
</div>

@code{
    Products products;
    List<Product> filteredProducts;
    List<PurchaseProducts> productToPurchase;
    PurchaseProducts purchasedProduct;

    protected override void OnInitialized()
    {
        filteredProducts = new List<Product>();
        products = new Products();
        if (state.ValueState == 0)
        {
            filteredProducts = products;
        }
        else
        {
            filteredProducts = products.Where(p => p.CategoryId == state.ValueState).ToList();
        }
        productToPurchase = new List<PurchaseProducts>();
        Mapper.Map(filteredProducts, productToPurchase);
    }
    private void purchased(int id)
    {
        purchasedProduct = new PurchaseProducts();
        purchasedProduct = productToPurchase.Where(p => p.ProductId == id).FirstOrDefault();
        state.UpdatePurchasedProducts(purchasedProduct);
        foreach (var product in productToPurchase)
        {
            if (product.ProductId == id)
            {
                product.purchase = "Purchased";
            }
        }
    }
    private void NavigateToBill()
    {
        Navigate.NavigateTo("/billcomponent");
    }

}
